<center>Java - 对象与类</center>

Java是一种面向对象的语言。因为它是面向对象的语言，所以Java支持一下基本特性。

    多态性
    
    继承
    
    封装
    
    抽象
    
    类
    
    对象
    
    实例
    
    方法
    
    信息解析
    
    在这一章，我们将会研究概念——类与对象
    
        Object — 对象拥有状态与行为。例如：一只狗拥有的状态有颜色、名字、种类而行为有摇摆尾巴、狗叫声、吃东西。一个对象是类的实例。 
        
        Class — 一个类可以定义为描述行为或者状态模板或者蓝图且支持对象的类型。
        
Java对象
    
    现在让我们深入了解什么是对象。 如果我们思考真实世界，那么我们会发现我们周围有许多对象，猫、狗、人等等。所有对象都有状态跟行为。
    
    假设我们思考一只狗，那么它的状态是 — 名字、种类、颜色，行为是 — 叫、摇尾巴、跑。  
    
    如果你比较软件对象与真实世界的对象，则他们有非常相似的特征。
    
    软件对象也有状态和行为。一个软件对象的状态存储在字段里、行为用方法显示。
    
    因此，在软件的开发中，方法操作对象内部的状态和对象到对象是通过方法交流。
    
Java中的类
    
    类是创建单个对象的蓝图。
    
    以下是类样本。
    
类可以包含以下任何变量类型。
    
    局部变量 — 定义在方法、构造函数、代码块里的变量称为局部变量。变量在方法中被声明或者初始化，且变量随着方法的调用完毕而销毁。
    
    实例变量 — 实例变量在类中方法外的变量。当类实例化时变量会被初始化。可以从特定类中的方法、构造函数、代码块中访问实例变量。
    
    类变量 — 类变量定义在类中方法外，且用关键字static修饰。
    
一个类可以有许多方法去访问各种类型的方法的值。 在以上例子中，barking(), hungry() and sleeping()是方法。        

以下是研究Java语言中类时需要讨论的一些重要主题。
    
构造方法

在讨论关于类方面最要的话题之一是构造函数。每一个类都有一个构造函数。如果我们没有明确在类中写出构造方法，那么
Java编译器在类中默认创建构造方法。

每次创建新的对象时至少有一个构造方法被调用。 构造方法的主要规则是必须跟类的名称一样。一个类可以有很多构造方法。

以下是构造方法的例子  
    
