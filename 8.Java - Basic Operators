Java提供一组丰富运算符操作变量。我们可以将Java所以运算符划分为以下组 ——

        算法运算符

        关系运算符
  
        位运算符

        逻辑运算符

        赋值运算符

        三元运算符

算法运算符

算法运算符用于数学表达式，且同样的也用于代数。以下表格列出了算法运算符。

假设整型变量A保存的是10和整型变B保存的是20，那么 —— 

列举例子

+ : 在运算符两边添加值。 A + B 等于 30

- ：从左操作数减去右操作数。 A - B 等于 10

* : 运算符两边乘与值。 A * B 等于 200

/ : 左变操作数除于右边操作数。 B / A 等于2

% ：左边操作数除于右边操作数返回余数。 B % A 等于0

++: 操作数的值加1。 B++ 等于21

--：操作数的值减1。 B-- 等于19

关系运算符

Java语言支持以下关系运算符。假设变量A持有值10，变量B持有值20，那么——

列举例子

==：检查两个操作数的值是否相等，如果相等那么判断条件为true。（A == B)是false。

!=: 检查两个操作数的值是否相等，如果不相等那么判断条件为true. (A != B)是true。

> : 检查左边操作数的值是否大于右边操作数，如果是，那么判断条件为true。（A > B )是false。

< : 检查左边操作数的值是否小于右边操作数，如果是，那么判断条件为true。（A < B )是true。

>= : 检查左边操作数的值是否大于等于右边操作数，如果是，那么判断条件为true。（A >= B )是false。

<= : 检查左边操作数的值是否小于等于右边操作数，如果是，那么判断条件为true。（A <= B )是true。

位运算符

Java定义了一些位运算符，它们可以应用于整型类型，长整型、整型、短整型、字符型和字节型。

位运算符用于位执行，且执行位操作。假设 a = 60 和 b = 13;以下是它们二进制表示格式 ——

以下表格列出了位运算符——

假设整型变量A持有值60和变量B持有值13，那么——

列举例子

&  ：如果二进制和运算符存在于两个操作数中，那么二进制与运算符拷贝一位比特到结果里。

|  ：如果二进制或运算符存在于其中一个操作数中，那么二进制或运算符拷贝一位比特。

^  : 如果二进制异或运算符设置一个操作数中而不是两个，那么二进制异或运算符拷贝一位比特。

~  : 二进制补码运算符是一元且有转换的比特的效果。

<< : 二进制左移运算符。右操作数指定左操作数的值向左移动的位数。

>> : 二进制右移运算符。左操作数指定右操作数的值向右移动的位数。

>>> :右移补零运算符。右操作数指定左操作的值向右移动的位数，且移动的值由零填充。

逻辑运算符

以下表格列出了逻辑运算符 - 

假设布尔变量A持有真，变量B持有假，那么 —— 
列举例子

&& : 逻辑与运算符。如果两个运算符不为零，那么条件成立。

|| ：逻辑或运算符。如果两个运算符中一个不为零，那么条件成立。

!  : 逻辑非运算符。用于反转操作数逻辑状态。如果条件为真，那么逻辑非运算符为假。

赋值运算符

以下是Java语言支持的赋值运算符 ——

列举例子

=  ：简单的赋值运算符。右边操作数的值分配到左边操作数。

+= : 加和赋值运算符。右边操作数加左边操作数，结果分配到左边操作数。

-= : 减和赋值运算符。右边操作数减左边操作数，结果分配到左边操作数。

*= :乘 和赋值运算符。右边操作数乘左边操作数，结果分配到左边操作数。

/= : 除和赋值运算符。右边操作数除于左边操作数，结果分配到左边操作数。

%= : 模数和赋值运算符。两个操作数的模数，结果分配到左边操作数。

<<=: 左移和赋值运算符。

>>=: 右移和赋值运算符。

&  : 位和赋值运算符。

^= : 按为异或赋值运算符。

|= ：位包容或和赋值运算符。

混合运算符

Java语言支持少数的其它运算符。

条件运算符（？：）

条件运算符也称为三目运算符。该运算符包含三个操作数且用于估计布尔的表达式。
运算符的目标决定哪一个值应该分配给变量。三目运算符格式为——

判断对象类型运算符

此运算符仅仅用于对象的引用变量。该运算符检查对象是否特定的类型。
（类类型或者接口类型）判断对象类型运算符格式为-

如果运算符左边的对象引用变量通过右边的类/接口类型的IS-A检查,那么结果为真，以下是例子 ——

这会产生以下结果 ——

如果被比较的对象是赋值兼容右边的类型，那么运算符仍然返回真。以下是另一个例子。

Java运算符的优先级

运算符优先级决定表达式中术语的分组。这会影响到如何评估表达式。某些运算符优先级高于其它运算符；
例如，乘法运算符优先级高于加法运算符 —— 
例如，x =  7 + 3 * 2;这里x分配13，不是20是因为运算符*优先级高于+，因此它首先3乘于2再加于7。

这里，优先级最高的运算符显示在表格的顶部。那些优先级最低的运算符显示在表格底端。
在一个表达式中，高级运算符会首先被评估。

下一章是什么？

下一章讲解关于Java程序的循环控制。这章节将描述各种类型的循环,在Java开发程序中
怎么使用循环和使用循环的目的是什么。



